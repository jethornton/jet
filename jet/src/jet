#!/usr/bin/env python3

import sys, os, subprocess

from PyQt6.QtWidgets import QApplication, QMainWindow, QDialog
from PyQt6.uic import loadUi
from PyQt6.QtCore import Qt, QTimer, QEvent

# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

import linuxcnc

from libjet import connections
from libjet import commands
from libjet import status
from libjet import startup
from libjet import editor

BUILD_DATE = '1/24/24'
VERSION = '0.1.0'

class number_pad(QDialog):
	def __init__(self):
		super().__init__()
		
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))

		# set the library path
		if self.path == '/usr/bin':
			self.lib_path = '/usr/lib/libjet'
			self.gui_path = '/usr/lib/libjet'
		else:
			self.lib_path = os.path.join(self.path, 'libjet')
			self.gui_path = self.path

		num_ui_path = os.path.join(self.gui_path, 'numbers.ui')
		loadUi(num_ui_path, self)
		self.buttonBox.accepted.connect(self.accept)
		self.buttonBox.rejected.connect(self.reject)
		self.clear_pb.clicked.connect(self.clear)
		self.dot_pb.clicked.connect(self.dot)
		self.dash_pb.clicked.connect(self.dash)
		for i in range(10):
			getattr(self, f'num_pb_{i}').clicked.connect(self.post)

	def post(self):
		#print(self.sender().objectName()[-1])
		txt = self.numbers_lb.text()
		self.numbers_lb.setText(f'{txt}{self.sender().objectName()[-1]}')

	def clear(self):
		self.numbers_lb.clear()

	def dot(self):
		txt = self.numbers_lb.text()
		self.numbers_lb.setText(f'{txt}.')

	def dash(self):
		txt = self.numbers_lb.text()
		self.numbers_lb.setText(f'-{txt}')

	def retval(self):
		try:
			return(float(self.numbers_lb.text()))
		except:
			return False

class jet_gui(QMainWindow):
	def __init__(self):
		super().__init__()
		'''
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/libmesact'
			self.docs_path = '/usr/share/doc/mesact'
			self.installed = True
			uic.loadUi(os.path.join(self.lib_path, 'mesact.ui'), self)
		else:
			srcPath = os.path.split(os.path.realpath(sys.argv[0]))[0]
			self.lib_path = os.path.join(srcPath, 'libmesact')
			self.docs_path = srcPath
			self.installed = False
			uic.loadUi(os.path.join(srcPath, 'mesact.ui'), self)
		stylesheet = os.path.join(self.lib_path, 'mesact.qss')
		with open(stylesheet,'r') as fh:
			self.setStyleSheet(fh.read())
		'''
		#print(os.path.split(sys.argv[0])[0]) local just returns .
		#print(os.path.dirname(os.path.realpath(sys.argv[0]))) this returns the path for both local and installed

		# get the path to the executable
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))

		# set the library path
		if self.path == '/usr/bin':
			self.lib_path = '/usr/lib/libjet'
			self.gui_path = '/usr/lib/libjet'
		else:
			self.lib_path = os.path.join(self.path, 'libjet')
			self.gui_path = self.path

		#print(f'Program Path: {self.path}')
		#print(f'Library Path: {self.lib_path}')
		#print(f'GUI Path: {self.gui_path}')


		# connect to linuxcnc
		if not self.check_emc():
			print('emc not running')
			sys.exit()
		self.emc = linuxcnc
		self.status = linuxcnc.stat()
		self.status.poll()

		#print(self.status.gcodes[1:])
		#print(self.status.mcodes[1:])

		self.command = linuxcnc.command()
		self.error = linuxcnc.error_channel()
		self.in_error = False
		self.inifile = False
		for i in range(len(sys.argv)):
			if sys.argv[i].endswith('.ini'):
				self.inifile = linuxcnc.ini(sys.argv[i])
				self.ini_path = os.path.split(sys.argv[i])[0]
				break
		if not self.inifile:
			self.ini_path = os.path.split(self.status.ini_filename)[0]
			self.inifile = linuxcnc.ini(self.status.ini_filename)

		# find and load the gui
		gui = self.inifile.find('DISPLAY', 'GUI') or False
		if gui: # gui is in the ini file
			gui_path = os.path.join(os.path.dirname(self.status.ini_filename), gui)
			if not os.path.isfile(gui_path): # gui not found
				gui_path = os.path.join(self.gui_path, 'jet.ui')
		else: # no gui specified
			gui_path = os.path.join(self.gui_path, 'jet.ui')

		loadUi(gui_path, self)

		# find and load the stylesheet
		stylesheet = None
		input = self.inifile.find('DISPLAY', 'INPUT') or False
		if input:
			if input.lower() == 'touch':
				stylesheet = os.path.join(self.lib_path, 'touch.qss')
			elif input.lower() == 'keyboard':
				stylesheet = os.path.join(self.lib_path, 'keyboard.qss')

		qss = self.inifile.find('DISPLAY', 'QSS') or False
		if qss: # load local qss file make sure it exists !!!!!
			if os.path.isfile(os.path.join(self.ini_path, qss)):
				stylesheet = os.path.join(self.ini_path, qss)

		if stylesheet is not None:
			with open(stylesheet,'r') as fh:
				self.setStyleSheet(fh.read())

		self.joints = int(self.inifile.find('KINS', 'JOINTS')) or False

		size = self.inifile.find('DISPLAY', 'SIZE') or False

		connections.connect(self)
		startup.setup_plot(self)
		startup.setup_jog(self)
		startup.set_labels(self)
		startup.set_buttons(self)
		startup.load_combos(self)
		startup.get_list_widgets(self)
		startup.get_pte(self)
		startup.load_mdi(self)
		#startup.print_constants(self)
		startup.test(self)

		# setup and start the status update timer every 0.1 second
		self.timer = QTimer()
		self.timer.timeout.connect(self.update_status)
		self.timer.start(10) # milliseconds

		# set the inital screen size
		if size:
			if size.lower() == 'minimized':
				self.showMinimized()
			if size.lower() == 'normal':
				self.showNormal()
			if size.lower() == 'maximized':
				self.showMaximized()
			elif size.lower() == 'full':
				self.showFullScreen()
		else:
			self.show()

	def check_emc(self):
		if 'linuxcnc' in subprocess.check_output(['pgrep', '-l', 'linuxcnc'], text=True):
			return True
		else:
			return False

	def update_status(self):
		self.status.poll()
		status.update(self)

	def keyPressEvent(self, event):
		if event.key() == Qt.Key.Key_Escape.value:
			self.close()
		elif (event.modifiers() == Qt.KeyboardModifier.AltModifier |
			Qt.KeyboardModifier.ControlModifier) and event.key() == Qt.Key.Key_X:
			self.close()

	def number_pad(self, x, y):
		target = self.sender().property('target')
		number_type = self.sender().property('type')
		np = number_pad()
		stylesheet = os.path.join(self.lib_path, 'touch.qss')
		with open(stylesheet,'r') as fh:
			np.setStyleSheet(fh.read())
		result = np.exec()
		if result:
			if number_type == 'int':
				value = int(np.retval())
				print('here')
			else:
				value = np.retval()
			getattr(self, f'{target}').setValue(value)

	def eventFilter(self, obj, event):
		if obj is self.gcode_pte.viewport() and event.type() == QEvent.Type.MouseButtonRelease:
			if event.button() == Qt.MouseButton.LeftButton:
				editor.show_line(self)
		return super(jet_gui, self).eventFilter(obj, event)

if __name__ == '__main__':
	app = QApplication(sys.argv)
	gui = jet_gui()
	sys.exit(app.exec())
